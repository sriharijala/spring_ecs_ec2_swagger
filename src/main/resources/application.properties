server.port=8080
spring.application.name=user-reviews
server.servlet.context-path=/reviews/v1
management.context-path=/reviews/v1/actuator

#hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
spring.security.user.name=admin
spring.security.user.password=admin

#Using H2 database
#spring.h2.console.enable=true
#spring.datasource.url=jdbc:h2:mem:socialmedia
#spring.datasource.platform=h2
#spring.datasource.driverClassName=org.h2.Driver

#automatically create/update tables
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#load the initial data
#spring.sql.init.data-locations=classpath:data-mysql.sql

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

logging.level.ROOT=INFO
logging.level.org.springframework.web: ERROR
logging.level.org.springframework.orm.jpa=ERROR
logging.level.org.springframework.transaction=ERROR
# for Hibernate only
logging.level.org.hibernate=ERROR
#logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG


# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0

#enable spring actuator,health and prometheus
management.endpoints.web.exposure.include= health, prometheus
management.metrics.tags.application   =${spring.application.name}
#management.endpoint.health.show-details= always

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

loki.push.url=http://localhost:3100/loki/api/v1/push